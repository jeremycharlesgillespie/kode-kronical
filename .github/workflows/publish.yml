name: Build and Publish to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        # Run basic import test
        python -c "import kode_kronical; print('âœ… Import successful')"
        
        # Run any existing tests
        if [ -f "tester.py" ]; then
          python tester.py
        fi
        
        # Run pytest if tests directory exists
        if [ -d "tests" ]; then
          pytest tests/ -v
        fi

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version management
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .  # Install package for version management
    
    - name: Configure git for version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Auto-increment version and build
      run: |
        # Run the existing build_package.py script
        python build_package.py
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/* --verbose
      continue-on-error: true  # Don't fail if version already exists
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose
      continue-on-error: true  # Don't fail if version already exists
    
    - name: Commit version bump
      run: |
        # Check if there are any changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          git add pyproject.toml src/kode_kronical/__init__.py
          git commit -m "ðŸ¤– Auto-increment version [skip ci]"
          git push
        else
          echo "No version changes to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        release_name: Release v${{ env.PACKAGE_VERSION }}
        body: |
          Automated release of kode-kronical v${{ env.PACKAGE_VERSION }}
          
          ## Changes
          - Auto-built and published to PyPI
          - Enhanced exceptions auto-enabled on import
          - Systems registry integration
          
          ## Installation
          ```bash
          pip install kode-kronical==${{ env.PACKAGE_VERSION }}
          ```
        draft: false
        prerelease: false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dist-packages
        path: dist/